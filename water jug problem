from collections import deque

def water_jug_solver(capacity_a, capacity_b, target):
    # Initialize the queue with the initial state and an empty path
    queue = deque([(0, 0, [])])
    visited = set()

    while queue:
        jug_a, jug_b, path = queue.popleft()

        # If we reach the target amount in either jug, return the path
        if jug_a == target or jug_b == target:
            return path + [(jug_a, jug_b)]

        # Skip if this state has been visited
        if (jug_a, jug_b) in visited:
            continue

        visited.add((jug_a, jug_b))

        # Add the possible next states to the queue
        # 1. Fill jug A
        if (capacity_a, jug_b) not in visited:
            queue.append((capacity_a, jug_b, path + [(jug_a, jug_b)]))
        
        # 2. Fill jug B
        if (jug_a, capacity_b) not in visited:
            queue.append((jug_a, capacity_b, path + [(jug_a, jug_b)]))
        
        # 3. Empty jug A
        if (0, jug_b) not in visited:
            queue.append((0, jug_b, path + [(jug_a, jug_b)]))
        
        # 4. Empty jug B
        if (jug_a, 0) not in visited:
            queue.append((jug_a, 0, path + [(jug_a, jug_b)]))
        
        # 5. Pour from jug A to jug B
        pour_to_b = min(jug_a, capacity_b - jug_b)
        if (jug_a - pour_to_b, jug_b + pour_to_b) not in visited:
            queue.append((jug_a - pour_to_b, jug_b + pour_to_b, path + [(jug_a, jug_b)]))
        
        # 6. Pour from jug B to jug A
        pour_to_a = min(jug_b, capacity_a - jug_a)
        if (jug_a + pour_to_a, jug_b - pour_to_a) not in visited:
            queue.append((jug_a + pour_to_a, jug_b - pour_to_a, path + [(jug_a, jug_b)]))

    return None

def print_solution(path):
    if path:
        print("Steps to reach the target amount:")
        for step in path:
            print(f"Jug A: {step[0]} liters, Jug B: {step[1]} liters")
    else:
        print("No solution exists.")

if __name__ == "__main__":
    # Example capacities and target
    capacity_a = 4  # Capacity of jug A
    capacity_b = 3  # Capacity of jug B
    target = 2      # Target amount of water

    solution_path = water_jug_solver(capacity_a, capacity_b, target)
    print_solution(solution_path)
