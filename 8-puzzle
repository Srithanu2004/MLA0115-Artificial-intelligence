from heapq import heappop, heappush
from itertools import count

class PuzzleState:
    def __init__(self, board, empty_tile, moves=0, previous=None):
        self.board = board
        self.empty_tile = empty_tile
        self.moves = moves
        self.previous = previous
        self.priority = self.moves + self.heuristic()
    
    def heuristic(self):
        distance = 0
        goal_positions = {num: (i // 3, i % 3) for i, num in enumerate(list(range(1, 9)) + [0])}
        for i, tile in enumerate(self.board):
            if tile != 0:
                goal_x, goal_y = goal_positions[tile]
                current_x, current_y = divmod(i, 3)
                distance += abs(goal_x - current_x) + abs(goal_y - current_y)
        return distance

    def get_neighbors(self):
        def swap(board, pos1, pos2):
            board = list(board)
            board[pos1], board[pos2] = board[pos2], board[pos1]
            return tuple(board)

        neighbors = []
        x, y = divmod(self.empty_tile, 3)
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            new_x, new_y = x + dx, y + dy
            if 0 <= new_x < 3 and 0 <= new_y < 3:
                new_empty_tile = new_x * 3 + new_y
                new_board = swap(self.board, self.empty_tile, new_empty_tile)
                neighbors.append(PuzzleState(new_board, new_empty_tile, self.moves + 1, self))
        return neighbors

    def __lt__(self, other):
        return self.priority < other.priority

    def __repr__(self):
        return f"Board: {self.board}\nEmpty Tile: {self.empty_tile}\nMoves: {self.moves}\nPriority: {self.priority}"

def a_star_solver(start, goal):
    start_state = PuzzleState(start, start.index(0))
    goal_state = PuzzleState(goal, goal.index(0))
    frontier = []
    heappush(frontier, start_state)
    explored = set()
    
    while frontier:
        current_state = heappop(frontier)
        
        if current_state.board == goal_state.board:
            path = []
            while current_state:
                path.append(current_state.board)
                current_state = current_state.previous
            return path[::-1]
        
        explored.add(tuple(current_state.board))
        for neighbor in current_state.get_neighbors():
            if tuple(neighbor.board) not in explored:
                heappush(frontier, neighbor)
    
    return None

def print_solution(path):
    for step in path:
        for i in range(0, 9, 3):
            print(step[i:i+3])
        print()

if __name__ == "__main__":
    start_board = (1, 2, 3, 4, 5, 6, 7, 8, 0)
    goal_board = (1, 2, 3, 4, 5, 6, 7, 8, 0)
    
    path = a_star_solver(start_board, goal_board)
    if path:
        print("Solution found!")
        print_solution(path)
    else:
        print("No solution exists.")
